
const { Client, GatewayIntentBits, Partials, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, Events, EmbedBuilder, SlashCommandBuilder, REST, Routes, ButtonBuilder, ButtonStyle } = require('discord.js');

const client = new Client({
  intents: [GatewayIntentBits.Guilds],
  partials: [Partials.Channel]
});

// üîÅ IDE √çRD A SAJ√ÅT ADATAIDAT:
require('dotenv').config();
const TOKEN = process.env.BOT_TOKEN;
const CLIENT_ID = '1385283856789274805';
const GUILD_ID = '1133389389423190096';
const K√úLD√âS_CSATORNA_ID = '1187376007104184362';

// ‚¨áÔ∏è Slash parancs regisztr√°l√°s
const commands = [
  new SlashCommandBuilder()
    .setName('jelentes')
    .setDescription('Rend≈ërs√©gi jelent√©s k√©sz√≠t√©se')
].map(command => command.toJSON());

const rest = new REST({ version: '10' }).setToken(TOKEN);

(async () => {
  try {
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });
    console.log('Slash parancs regisztr√°lva!');
  } catch (err) {
    console.error('Hiba:', err);
  }
})();

// üóÇÔ∏è √Åtmeneti t√°rol√≥ k√©t modal k√∂z√∂tt
const modalCache = new Map();

client.on(Events.InteractionCreate, async interaction => {
  // üîπ Slash parancs ‚Üí els≈ë modal
  if (interaction.isChatInputCommand() && interaction.commandName === 'jelentes') {
    const modal1 = new ModalBuilder()
      .setCustomId('jelentes_modal_1')
      .setTitle('Rend≈ërs√©gi jelent√©s ‚Äì 1/2');

    modal1.addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('tipus').setLabel('T√≠pus (pl. K√∂r√∂z√©s)').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('keresztnev').setLabel('Keresztn√©v').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('vezeteknev').setLabel('Vezet√©kn√©v').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('szuletesi').setLabel('Sz√ºlet√©si id≈ë (√â√â√â√â.HH.NN)').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('neme').setLabel('Neme (pl. F√©rfi)').setStyle(TextInputStyle.Short).setRequired(true)
      )
    );

    await interaction.showModal(modal1);
  }

  // üîπ Els≈ë modal bek√ºldve ‚Üí gomb j√∂n
  if (interaction.isModalSubmit() && interaction.customId === 'jelentes_modal_1') {
    const values = {
      tipus: interaction.fields.getTextInputValue('tipus'),
      keresztnev: interaction.fields.getTextInputValue('keresztnev'),
      vezeteknev: interaction.fields.getTextInputValue('vezeteknev'),
      szuletesi: interaction.fields.getTextInputValue('szuletesi'),
      neme: interaction.fields.getTextInputValue('neme'),
    };

    modalCache.set(interaction.user.id, values);

    const gomb = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('modal2_gomb')
        .setLabel('‚ûï K√∂vetkez≈ë oldal')
        .setStyle(ButtonStyle.Primary)
    );

    await interaction.reply({
      content: '‚úÖ Els≈ë r√©sz k√©sz! Kattints a gombra a folytat√°shoz:',
      components: [gomb],
      flags: 64 // ephemeral √∫j m√≥don
    });
  }

  // üîπ M√°sodik modal megnyit√°sa a gombra
  if (interaction.isButton() && interaction.customId === 'modal2_gomb') {
    const modal2 = new ModalBuilder()
      .setCustomId('jelentes_modal_2')
      .setTitle('Rend≈ërs√©gi jelent√©s ‚Äì 2/2');

    modal2.addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('frakcio').setLabel('Frakci√≥').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('buntett').setLabel('Elk√∂vetett b≈±nt√©ny(ek)').setStyle(TextInputStyle.Paragraph).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('csekkdb').setLabel('Csekk(ek) mennyis√©ge').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('csekkosszeg').setLabel('Csekk(ek) √∂sszege').setStyle(TextInputStyle.Short).setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder().setCustomId('borton').setLabel('Let√∂ltend≈ë b√∂rt√∂n (opcion√°lis)').setStyle(TextInputStyle.Short).setRequired(false)
      )
    );

    await interaction.showModal(modal2);
  }

  // üîπ M√°sodik modal bek√ºld√©se ‚Üí jelent√©s elk√ºld√©se embedben
  if (interaction.isModalSubmit() && interaction.customId === 'jelentes_modal_2') {
    const previous = modalCache.get(interaction.user.id);
    if (!previous) return interaction.reply({ content: '‚ùå Hiba: El≈ëz≈ë adatok hi√°nyoznak.', ephemeral: true });

    const frakcio = interaction.fields.getTextInputValue('frakcio');
    const buntett = interaction.fields.getTextInputValue('buntett');
    const csekkdb = interaction.fields.getTextInputValue('csekkdb');
    const csekkosszeg = interaction.fields.getTextInputValue('csekkosszeg');
    const borton = interaction.fields.getTextInputValue('borton') || 'Nincs megadva';
   
    const urgencyColor = previous.tipus.toLowerCase().includes('k√∂r√∂z√©s') ? 0xFF0000 : 0x00AEFF;

    const embed = new EmbedBuilder()
      .setTitle(`üìÑ Rend≈ërs√©gi jelent√©s - ${previous.keresztnev} ${previous.vezeteknev}`)
      .setColor(urgencyColor)
      .addFields(
        { name: 'T√≠pus', value: previous.tipus, inline: true },
        { name: 'N√©v', value: `${previous.keresztnev} ${previous.vezeteknev}`, inline: true },
        { name: 'Sz√ºlet√©si id≈ë', value: previous.szuletesi, inline: true },
        { name: 'Neme', value: previous.neme, inline: true },
        { name: 'Frakci√≥', value: frakcio, inline: false },
        { name: 'Elk√∂vetett b≈±nt√©ny(ek)', value: buntett, inline: false },
        { name: 'Csekk(ek) mennyis√©ge', value: csekkdb, inline: true },
        { name: 'Csekk(ek) √∂sszege', value: csekkosszeg, inline: true },
        { name: 'Let√∂ltend≈ë b√∂rt√∂nb√ºntet√©s', value: borton, inline: true },
      )
      .setTimestamp();

    const csatorna = await client.channels.fetch(K√úLD√âS_CSATORNA_ID);
    await csatorna.send({ embeds: [embed] });

    await interaction.reply({ content: '‚úÖ Jelent√©s sikeresen bek√ºldve!', flags: 64 });
    modalCache.delete(interaction.user.id);
  }
});

client.login(TOKEN);
